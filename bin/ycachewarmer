#!/usr/bin/env node

var program = require('commander'),
    spawn = require('child_process').spawn,
    fs = require('fs'),
    path = require('path');
    

function daemonize(url, options) {
  var config;
  url = url || '';
  options = options || {};
  config = options.configfile;
  
  // check if warmer is running or not exited gracefully
  if (fs.existsSync(config.pid)) {
    console.log('pid existing: ' + config.pid);
    console.log('you should kill the running process first');
    return;
  }

  var child = spawn(process.execPath, [__dirname + '/../lib/jobscheduler.js', url, JSON.stringify(config)], { stdio: ['ignore', 'ignore', 'ignore'], detached: true });
  
  // have to exit when writing pid fails
  fs.writeFile(config.pid, child.pid, function(err) {
    if (err) {
      console.log('unable to write pid file, exiting');
      return child.kill();
    }
    // allow parent to exit
    child.unref()
  });
}


function loadConfig(confPath) {
  var config;
  confPath = path.resolve(process.cwd(), confPath);
  
  if (!fs.existsSync(confPath)) {
    console.log('config file does not exist, exiting...');
    return;
  }
  
  config = JSON.parse(fs.readFileSync(confPath, "utf8"));
  return config;
}


program
  .version('0.0.1')

program
  .command('run [url]')
  .description('run cachewarmer')
  .option('-d, --daemon', 'running in background')
  .option('-c, --configfile [config path]', 'location of the config file [~/.ycachewarmer/config.json]', loadConfig, '~/.ycachewarmer/config.json')
  .action(function(url, options) {
    if (options.configfile) {
      daemonize(url, options); 
    }
  });
  
program.parse(process.argv);

// vim: filetype=javascript
